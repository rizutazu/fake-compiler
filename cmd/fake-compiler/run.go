package main

import (
	cc "github.com/rizutazu/fake-compiler/compiler"
	"github.com/rizutazu/fake-compiler/util"
	"github.com/spf13/cobra"
	"log"
)

var runCmd = &cobra.Command{
	Use:   "run",
	Short: "run compiler",
	Long: `running the specified compiler type over given directory or config file. The config file is generated by "gen"
subcommand and acts like a summary of a directory`,
	Run: func(cmd *cobra.Command, args []string) {
		var compiler cc.Compiler
		var path string
		var t cc.SourceType
		var err error

		if configPath != "" {
			path = configPath
			t = cc.SourceTypeConfig
		} else {

			path, err = util.FormatPath(dirPath)
			if err != nil {
				log.Fatal(err)
			}
			t = cc.SourceTypeDir
		}

		switch compilerType {
		case "cxx":
			compiler, err = cc.NewCXXCompiler(path, t, threads)
			if err != nil {
				log.Fatal(err)
			}
		default:
			log.Fatalf("unknown compiler type %s\n", compilerType)
		}

		compiler.Run()
	},
}

func init() {
	runCmd.Flags().IntVarP(&threads, "threads", "t", 0, "number of threads")
	runCmd.Flags().StringVarP(&compilerType, "compiler", "C", "", "specified compiler type")
	//runCmd.PersistentFlags().StringVarP(&bar, "progressbar", "p", "", "specified progressbar")
	runCmd.Flags().StringVarP(&configPath, "config", "c", "", "path of compiler config")
	runCmd.Flags().StringVarP(&dirPath, "dir", "d", "", "path of directory to compile")
	_ = runCmd.MarkFlagRequired("threads")
	_ = runCmd.MarkFlagRequired("compiler")
	//_ = runCmd.MarkFlagRequired("progressbar")
	runCmd.MarkFlagsMutuallyExclusive("config", "dir")
}
